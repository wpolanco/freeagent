version: "3.7"
services:
  mongodb:
    image: mongo:6.0.6
    container_name: 'mongo'
    restart: always
    ports:
      - 27017:27017
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backend_services
  rabbitmq:
    image: rabbitmq:3.11.17-management-alpine
    container_name: 'rabbitmq'
    restart: always
    environment:
      - "RABBITMQ_DEFAULT_USER=username"
      - "RABBITMQ_DEFAULT_PASS=password"
    ports:
      - 15672:15672
      - 5672:5672
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - ./rabbitmq_enabled_plugins:/etc/rabbitmq/enabled_plugins
    networks:
      - backend_services
  orderservice:
    build: src/order-service
    container_name: 'orderservice'
    restart: always
    ports:
      - 3000:3000
    healthcheck:
      test: ["CMD", "wget", "-O", "/dev/null", "-q", "http://orderservice:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      - ORDER_QUEUE_HOSTNAME=rabbitmq
      - ORDER_QUEUE_PORT=5672
      - ORDER_QUEUE_USERNAME=username
      - ORDER_QUEUE_PASSWORD=password
      - ORDER_QUEUE_NAME=orders
      - ORDER_QUEUE_RECONNECT_LIMIT=3
    networks:
      - backend_services
    depends_on:
      rabbitmq:
        condition: service_healthy
  makelineservice:
    build: src/makeline-service
    container_name: 'makelineservice'
    restart: always
    ports:
      - 3001:3001
    healthcheck:
      test: ["CMD", "wget", "-O", "/dev/null", "-q", "http://makelineservice:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      - ORDER_QUEUE_URI=amqp://rabbitmq:5672
      - ORDER_QUEUE_USERNAME=username
      - ORDER_QUEUE_PASSWORD=password
      - ORDER_QUEUE_NAME=orders
      - ORDER_DB_URI=mongodb://mongodb:27017
      - ORDER_DB_NAME=orderdb
      - ORDER_DB_COLLECTION_NAME=orders
    networks:
      - backend_services
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
  productservice:
    build: src/product-service
    container_name: 'productservice'
    restart: always
    ports:
      - 3002:3002
    healthcheck:
      test: ["CMD", "wget", "-O", "/dev/null", "-q", "http://productservice:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backend_services
  storefront:
    build: src/store-front
    container_name: 'storefront'
    restart: always
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "wget", "-O", "/dev/null", "-q", "http://storefront:80/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      - VUE_APP_PRODUCT_SERVICE_URL=http://productservice:3002/
      - VUE_APP_ORDER_SERVICE_URL=http://orderservice:3000/
    networks:
      - backend_services
    depends_on:
      - productservice
      - orderservice
  storeadmin:
    build: src/store-admin
    container_name: 'storeadmin'
    restart: always
    ports:
      - 8081:8081
    healthcheck:
      test: ["CMD", "wget", "-O", "/dev/null", "-q", "http://storeadmin:80/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      - VUE_APP_PRODUCT_SERVICE_URL=http://productservice:3002/
      - VUE_APP_MAKELINE_SERVICE_URL=http://makelineservice:3001/
      - VUE_APP_AI_SERVICE_URL=http://aiservice:5001/
    networks:
      - backend_services
    depends_on:
      - productservice
      - makelineservice
  virtualcustomer:
    build: src/virtual-customer
    container_name: 'virtualcustomer'
    restart: always
    environment:
      - ORDER_SERVICE_URL=http://orderservice:3000/
      - ORDERS_PER_HOUR=500
    networks:
      - backend_services
    depends_on:
      orderservice:
        condition: service_healthy
  virtualworker:
    build: src/virtual-worker
    container_name: 'virtualworker'
    restart: always
    environment:
      - MAKELINE_SERVICE_URL=http://makelineservice:3001
      - ORDERS_PER_HOUR=400
    networks:
      - backend_services
    depends_on:
      makelineservice:
        condition: service_healthy
  aiservice:
    build: src/ai-service
    container_name: 'aiservice'
    restart: always
    ports:
      - 5001:5001
    healthcheck:
      test: ["CMD", "wget", "-O", "/dev/null", "-q", "http://aiservice:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      - USE_AZURE_OPENAI=True # set to False if you are not using Azure OpenAI
      - AZURE_OPENAI_DEPLOYMENT_NAME= # required if using Azure OpenAI
      - AZURE_OPENAI_ENDPOINT= # required if using Azure OpenAI
      - OPENAI_API_KEY= # required if using OpenAI and not required if using Azure OpenAI with Azure AD 
      - OPENAI_ORG_ID= # required if using OpenAI
    networks:
      - backend_services
networks:
  backend_services:
    driver: bridge